@using ChinookDataAccess.Models;
@using ChinookDataAccess.Pages.Interfaces;
@using System.Security.Claims;
<div class="top-row ps-3 navbar navbar-dark">
    <div class="container-fluid">
        <a class="navbar-brand" href="">Chinook</a>
        <button title="Navigation menu" class="navbar-toggler" @onclick="ToggleNavMenu">
            <span class="navbar-toggler-icon"></span>
        </button>
    </div>
</div>

<div class="@NavMenuCssClass" @onclick="ToggleNavMenu">
    <nav class="flex-column">
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="" Match="NavLinkMatch.All">
                <span class="oi oi-home" aria-hidden="true"></span>Home
            </NavLink>
        </div>
        @if (userPlaylists != null)
        {
            @foreach (var userlist in userPlaylists)
            {
                <div class="nav-item px-3">
                    <NavLink class="nav-link" href="" @onclick="()=>GoToPlayList(userlist.PlaylistId)">
                        <i class="bi bi-music-note-list me-3" style="font-size: 1.25em"></i>@GetPlayListById(userlist.PlaylistId).Result.Name
                    </NavLink>
                </div>
            }
        }
    </nav>
</div>

@code {
    @inject NavigationManager navigationManager
    private bool collapseNavMenu = true;
    private List<UserPlaylist?> userPlaylists;
    private Playlist playLists;
    [Inject] IPlayListPageData _playListDataAccess { get; set; }
    [CascadingParameter] private Task<AuthenticationState> authenticationState { get; set; }
    private string? NavMenuCssClass => collapseNavMenu ? "collapse" : null;

    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }
    protected override async Task OnInitializedAsync()
    {
        string userId = GetUserId();
        userPlaylists = await _playListDataAccess.getPlayListByUser(userId) ?? null;
        await InvokeAsync(StateHasChanged);
    }
    private string GetUserId()
    {
        var user = (authenticationState).Result.User;
        var userId = user.FindFirst(u => u.Type.Contains(ClaimTypes.NameIdentifier))?.Value;
        return userId;
    }
    private async Task<Playlist> GetPlayListById(long playListId)
    {
        playLists = await _playListDataAccess.getPlayListById(playListId)??null;
        return playLists;
    }
    private void GoToPlayList(long id)
    {
        navigationManager.NavigateTo($"/PlayList/{id}");
    }
}
