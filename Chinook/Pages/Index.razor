@page "/"
@using ChinookDataAccess.ClientModels;
@using ChinookDataAccess.Models;
@using ChinookDataAccess.PageData.Interfaces;
@attribute [Authorize]
@using ChinookDataAccess.Models;
@using Microsoft.EntityFrameworkCore

<PageTitle>Index</PageTitle>

<h1>Artists</h1>

@if (Artists == null)
{
    <Loading />
}
else
{
    <div class="w-50">
        <SearchBox Items="Artists" OnSearch="SearchFilteredArtists"></SearchBox>
    </div>
    <table class="table table-striped table-hover table-sm">
        <thead>
            <tr>
                <th>Name</th>
                <th>Number of albums</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var artist in filteredArtists)
            {
                <tr>
                    <td><a href="Artist/@artist.ArtistId">@artist.Name</a></td>
                    <td>@GetAlbumsForArtist(Convert.ToInt32(artist.ArtistId))</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<ArtistClient> Artists;
    private List<ArtistClient> filteredArtists=new();
    [Inject] IIndexData  _indexDataAccess { get; set; }

    protected override async Task OnInitializedAsync() {
        await InvokeAsync(StateHasChanged);
        Artists = await _indexDataAccess.GetArtists();
        filteredArtists = Artists;
    }

    public int GetAlbumsForArtist(int artistId)
    {
        var albumCount= _indexDataAccess.GetAlbumsForArtist(artistId).Result;
        return albumCount.Count();
    }
    private void SearchFilteredArtists(string searchItem)
    {
        if (string.IsNullOrEmpty(searchItem))
        {
            filteredArtists = Artists;
        }
        else
        {
            filteredArtists = Artists.Where(a => a.Name.Contains(searchItem, StringComparison.OrdinalIgnoreCase)).ToList();
        }
    }
}
